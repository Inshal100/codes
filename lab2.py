# -*- coding: utf-8 -*-
"""ML_LAB_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vbnm21aDFCJMoO4aa20MPU0hVbaS5DnU
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.impute import SimpleImputer

df = pd.read_csv('employee_data.csv')
df

df.isna().sum()

#**Handling Missing Values using Median**
#edian is more robust to outliers, making it a better choice when dealing with salaries and ages, which often have extreme values.
num_imputer = SimpleImputer(strategy="median")
df[["Age", "Salary"]] = num_imputer.fit_transform(df[["Age", "Salary"]])
print("\nAfter Handling Missing Values:\n", )
df.head()

df["JoiningDate"] = pd.to_datetime(df["JoiningDate"], errors='coerce')
df["JoiningDate"].fillna(pd.to_datetime("2000-01-01"), inplace=True)

"""**OneHotEncoding**"""

df = pd.get_dummies(df, columns=["Department"], drop_first=False)

"""**Label Encoding**"""

label_encoder = LabelEncoder()
df["Name"] = label_encoder.fit_transform(df["Name"])

"""**Scaling Numerical Features**"""

scaler = StandardScaler()
df[["Age", "Salary", "PerformanceScore"]] = scaler.fit_transform(df[["Age", "Salary", "PerformanceScore"]])

"""**Handling Duplicate Records**"""

df = df.drop_duplicates(subset=["EmployeeID"], keep="first")

"""**Feature Engineering**"""

df["YearsAtCompany"] = 2025 - df["JoiningDate"].dt.year  # Assuming the current year is 2025
df["JoiningMonth"] = df["JoiningDate"].dt.month
df["JoiningDay"] = df["JoiningDate"].dt.day

df.drop(columns=["JoiningDate"], inplace=True)

df

# Set Seaborn style
sns.set_style("darkgrid")

# Create subplots for Age, Salary, and Performance Score
fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(18, 5))

# Age Distribution
sns.histplot(df["Age"], bins=10, kde=True, ax=axes[0], color="blue")
axes[0].set_title("Age Distribution", fontsize=14)
axes[0].set_xlabel("Age", fontsize=12)
axes[0].set_ylabel("Frequency", fontsize=12)

# Salary Distribution
sns.histplot(df["Salary"], bins=10, kde=True, ax=axes[1], color="green")
axes[1].set_title("Salary Distribution", fontsize=14)
axes[1].set_xlabel("Salary", fontsize=12)
axes[1].set_ylabel("Frequency", fontsize=12)

# Performance Score Distribution
sns.histplot(df["PerformanceScore"], bins=10, kde=True, ax=axes[2], color="red")
axes[2].set_title("Performance Score Distribution", fontsize=14)
axes[2].set_xlabel("Performance Score", fontsize=12)
axes[2].set_ylabel("Frequency", fontsize=12)

# Adjust layout to prevent overlapping
plt.tight_layout()

# Show the plot
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x="Department_Finance", y="Salary", data=df)
plt.title("Department-wise Salary Distribution")
plt.xlabel("Finance Department (1=Yes, 0=No)")
plt.ylabel("Salary")
plt.show()

plt.figure(figsize=(12, 5))
sns.barplot(x="PerformanceScore", y="Salary", hue="Department_Finance", data=df)
plt.title("Performance Score vs Salary (by Department)")
plt.xlabel("Performance Score")
plt.ylabel("Average Salary")
plt.legend(title="Finance Dept (1=Yes, 0=No)")
plt.show()

plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Feature Correlation Heatmap")
plt.show()

