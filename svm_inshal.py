# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/163aO1H4Aln6wllGQ3lzcwJ7MsYofPGUg
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.metrics import (
    accuracy_score, confusion_matrix, classification_report,
    roc_auc_score, roc_curve
)

data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target, name='target')

print("Missing values:\n", X.isna().sum())
print("\nDataset preview:\n", X.head())
print("\nTarget class counts:\n", y.value_counts())

sns.countplot(x=y)
plt.title('Class Distribution')
plt.show()

correlations = X.corrwith(y).abs().sort_values(ascending=False).head(10)
top_features = correlations.index

plt.figure(figsize=(10, 6))
sns.heatmap(X[top_features].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Top 10 Correlated Features with Target")
plt.show()

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

print("Train class distribution:\n", y_train.value_counts())
print("Test class distribution:\n", y_test.value_counts())

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

pca_vis = PCA(n_components=2)
X_train_pca_vis = pca_vis.fit_transform(X_train_scaled)
X_test_pca_vis = pca_vis.transform(X_test_scaled)

plt.figure(figsize=(8, 6))
scatter = plt.scatter(
    X_train_pca_vis[:, 0], X_train_pca_vis[:, 1],
    c=y_train, cmap='coolwarm', edgecolors='k', alpha=0.8
)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('2D PCA Visualization of Breast Cancer Training Data')
plt.grid(True)
legend1 = plt.legend(*scatter.legend_elements(), title="Class")
plt.gca().add_artist(legend1)
plt.show()

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('pca', PCA(n_components=10)),
    ('svm', SVC(probability=True))
])

param_grid = {
    'svm__C': [0.1, 1, 10],
    'svm__gamma': ['scale', 0.01, 0.1, 1],
    'svm__kernel': ['rbf', 'linear']
}

grid = GridSearchCV(pipeline, param_grid, cv=5, scoring='accuracy', verbose=2, n_jobs=-1)
grid.fit(X_train, y_train)

print("\nBest Parameters:", grid.best_params_)
print("Best Cross-Validation Accuracy: {:.4f}".format(grid.best_score_))

best_model = grid.best_estimator_
y_pred = best_model.predict(X_test)
y_proba = best_model.predict_proba(X_test)[:, 1]

print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Test Accuracy: {:.4f}".format(accuracy_score(y_test, y_pred)))
print("Test ROC AUC: {:.4f}".format(roc_auc_score(y_test, y_proba)))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=data.target_names, yticklabels=data.target_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.figure(figsize=(7, 6))
plt.plot(fpr, tpr, label="ROC Curve (AUC = {:.2f})".format(roc_auc_score(y_test, y_proba)), color='blue')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_test_pca_vis[:, 0], y=X_test_pca_vis[:, 1], hue=y_pred, palette='coolwarm', style=y_test)
plt.title('Test Set Predictions (PCA space)')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.show()

