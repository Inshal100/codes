# -*- coding: utf-8 -*-
"""Practice2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RsavdrCKnB2yqxrDdL7MmyX2gu0rTOrD
"""

from sklearn.datasets import load_breast_cancer
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, cross_val_predict
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler,MinMaxScaler, LabelEncoder, OneHotEncoder
from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay,RocCurveDisplay, roc_auc_score, roc_curve, recall_score, f1_score
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

cancer = load_breast_cancer()
x = pd.DataFrame(cancer.data, columns=cancer.feature_names)
y = pd.Series(cancer.target)

cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

sns.countplot(x=cancer.target, palette='husl')
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Class Distribution')
plt.show()

scaler = MinMaxScaler()
x_scaled = scaler.fit_transform(x)

selector = SelectKBest(score_func=chi2, k=10)
x_selected = selector.fit_transform(x_scaled, y)

selected_features = x.columns[selector.get_support()]
print("Selected Features : \n",selected_features.to_list())

knn = KNeighborsClassifier(n_neighbors=5)

score = cross_val_score(knn, x_selected, y, cv=cv, scoring='accuracy')
y_proba = cross_val_predict(knn, x_selected, y, cv=cv, method='predict_proba')[:,1]
y_pred = cross_val_predict(knn, x_selected, y, cv=cv)

accuracy = accuracy_score(y,y_pred)
recall = recall_score(y,y_pred)
f1 = f1_score(y,y_pred)
roc = roc_auc_score(y,y_proba)

print("Accuracy : ",accuracy)
print("Recall : ",recall)
print("F1 Score : ",f1)
print("ROC AUC Score : ",roc)

ConfusionMatrixDisplay.from_predictions(y,y_pred, display_labels=cancer.target_names,cmap='Blues')
plt.show()

scores = selector.scores_[selector.get_support()]
plt.figure(figsize=(8,6))
sns.barplot(x=scores, y=selected_features, palette='husl')
plt.title("Top 10 Feature Scores (Chi²)")
plt.xlabel("Chi² Score")
plt.ylabel("Feature")
plt.tight_layout()
plt.show()

RocCurveDisplay.from_predictions(y,y_pred,name="KNN")

df_clean = pd.read_csv('employee_data.csv')
df_clean.head(12)

df_clean.info()

df_clean.isna().sum()

df_clean.drop_duplicates(subset=['EmployeeID'], keep='first', inplace=True)

df_clean.drop_duplicates(subset=['Name','Age','Department'], keep='first', inplace=True)

df_clean["JoiningDate"]  = pd.to_datetime(df_clean['JoiningDate'], errors='coerce', dayfirst=True)

df_clean.head(12)

df_clean["JoiningDate"].fillna(df_clean["JoiningDate"].median(), inplace=True)

df_clean.head(13)

df_clean["Name"] = df_clean["Name"].str.strip().str.title()
df_clean["Department"] = df_clean["Department"].str.strip().str.title()

df_clean.head(59)

ohe = OneHotEncoder(sparse_output = False,drop='if_binary')
df_clean_dep = ohe.fit_transform(df_clean[["Department"]])

le  = LabelEncoder()
df_clean["Name_code"] = le.fit_transform(df_clean["Name"])

df_clean

department_df = pd.DataFrame(df_clean_dep, columns=ohe.get_feature_names_out(['Department']))
df_final = pd.concat([df_clean.drop('Department',axis=1),department_df],axis=1)

df_final

